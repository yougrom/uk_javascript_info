//У JavaScript є вісім основних типів даних. 
// Наприклад, в один момент змінна може бути рядком, а в інший – числом:
let message = 123456;
message = "привіт";
console.log(message);


//number
let n = 123;
n = 12.345;
console.log(n);
//Є багато операцій, що можна робити з числами, наприклад, множення *, ділення /, додавання +, віднімання - тощо.
//Окрім звичайних чисел, є так звані “спеціальні числові значення”, що також мають відношення до цього типу даних: Infinity, -Infinity і NaN.

//Infinity являє собою математичну нескінченність ∞. Це спеціальне значення, що є більшим за будь-яке число.
alert(1 / 0); // Infinity
alert(Infinity); // Infinity

//NaN (Not a Number) являє собою помилку обчислення. Це є результат неправильної або невизначеної математичної операції, наприклад:
alert("not a number" / 2); // NaN, таке ділення є помилковим
//NaN є “причепливим” (“заразливим”). Будь-яка подальша математична операція з NaN повертає NaN:
alert( NaN + 1 ); // NaN
alert( 3 * NaN ); // NaN
alert( "not a number" / 2 - 1 ); // NaN
//Отже, якщо десь у математичному виразі є NaN, він поширюється на весь результат (є лише один виняток: результатом операції NaN ** 0 буде 1).
let a = NaN ** 0;
console.log(a);


//BigInt
//У JavaScript, тип “number” не може містити числа більші за (253-1) (це 9007199254740991), або менші за -(253-1) для від’ємних чисел. Це технічне обмеження, спричинене їхньою внутрішньою реалізацією.
// буква "n" у кінці означає, що це число типу BigInt
const bigInt = 1234567890123456789012345678901234567890n;


//string
//Рядок у JavaScript має бути оточений лапками.
let str = "Привіт";
let str2 = 'Одинарні лапки також дозволяються';
let phrase = `так можна вставляти ${str}`;
//Подвійні та одинарні лапки є “звичайними”. Тобто немає ніякої різниці, які саме використовувати.
//Зворотні лапки є розширенням функціональності. Вони дають змогу вбудовувати змінні та вирази в рядок, обрамляючи їх в ${…}, наприклад:

let nameIv = "Іван";
console.log(`Hello, ${nameIv}!`);
// вбудована змінна
alert(`Привіт, ${name}е!`); // Привіт, Іване!
// вбудований вираз
alert(`результат: ${1 + 2}`); // результат: 3
//Вираз всередині ${…} обчислюється, а результат обчислення стає частиною рядка.


//boolean - Булевий або логічний тип
//Логічний тип може приймати лише два значення: true (істина) та false (хиба).
let nameFieldChecked = true; // так, ім’я було перевірене
let ageFieldChecked = false; // ні, вік не був перевіреним

let isGreater = 4>1;
console.log(isGreater);// true (результат порівняння — "так")


//null
//Спеціальне значення null не належить до жодного з описаних вище типів.
//Воно формує окремий власний тип, який містить лише значення null:
let age = null;
console.log(age);
//Це лише спеціальне значення, яке представляє “нічого”, “порожнє” або “невідоме значення”.


//undefined
/**
 * Спеціальне значення undefined також стоїть окремо. Воно представляє власний тип, подібний до “null”.
undefined означає, що “значення не присвоєно”.
 */
let age;
alert(age); // покаже "undefined"



//Об’єкти (object) та символи (symbol)
/**
 * Усі інші типи називаються “примітивами”, тому що їхні значення можуть містити тільки один елемент 
 * (це може бути рядок, число, або будь-що інше). В об’єктах же зберігаються колекції даних 
 * і більш складні структури.
 */

/**
 * Тип symbol використовується для створення унікальних ідентифікаторів в об’єктах. 
 * Ми згадали цей тип для повноти, проте докладніше вивчимо його після об’єктів.
 */


//Оператор typeof
